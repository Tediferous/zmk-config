/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

#define BASE        0
#define NAV         1
#define NUM         2
#define SYM         3
#define FUN         4
#define MEDIA       5


&lt { quick_tap_ms = <200>; };

&sk {
    release-after-ms = <500>;
    quick-release;
};

/ {

   conditional_layers {
        compatible = "zmk,conditional-layers";
        tri_layer {
            if-layers = <1 2>;
            then-layer = <5>;
        };
    };
  combos {
    compatible = "zmk,combos";   
      space { 
        timeout-ms = <50>;
        key-positions=<24 32>;
        bindings=<&kp SPACE>;
      };
      bpsc {
        timeout-ms = <50>;
        key-positions=<18 19>;
        bindings=<&kp BSPC>;
       };  

      bpsc_2 {
        timeout-ms = <50>;
        key-positions=<1 6>;
        bindings=<&kp BSPC>;
       };
       
      // sqt {
      //   timeout-ms = <50>;
      //   key-positions=<31 19>;
      //   bindings=<&kp SQT>;
      // };

      // dqt {
      //   timeout-ms = <50>;
      //   key-positions=<10 31 19>;
      //   bindings=<&kp DQT>;
      // };

      semi_colon {
        timeout-ms = <50>;
        key-positions=<19 32>;
        bindings=<&kp SEMI>;
      };

      colon  {
        timeout-ms = <50>;
        key-positions=<10 19 32>;
        bindings=<&kp COLON>;
      };
    
      l_shift {
        timeout-ms = <75>;
        key-positions = <20 21>;
        bindings = <&sk LSHFT>;
      };
      l_ctrl {
        timeout-ms = <50>;
        key-positions = <21 22>;
        bindings = <&sk LCTRL>;
      };
      l_gui {
        timeout-ms = <50>;
        key-positions = <22 23>;
        bindings = <&sk LGUI>;
      };
      l_alt {
        timeout-ms = <50>;
        key-positions = <23 24>;
        bindings = <&sk LALT>;
      };

      l_shift_pinky {
        timeout-ms = <75>;
        key-positions=<10 20>;
        bindings=<&sk LSHFT>;
      };

      l_gui_thumb {
        timeout-ms = <50>;
        key-positions = <31 32>;
        bindings = <&sk LGUI>;
      };

      r_gui_thumb {
        timeout-ms = <50>;
        key-positions = <33 34>;
        bindings = <&sk RGUI>;
      };

      r_shift_pinky {
        timeout-ms = <75>;
        key-positions=<19 29>;
        bindings=<&sk RSHFT>;
      };

      r_alt {
        timeout-ms = <50>;
        key-positions = <25 26>;
        bindings = <&sk RALT>;
      };

      r_gui {
        timeout-ms = <50>;
        key-positions = <26 27>;
        bindings = <&sk RGUI>;
      };

      r_ctrl {
        timeout-ms = <50>;
        key-positions = <27 28>;
        bindings = <&sk RCTRL>;
      };

      r_shift {
        timeout-ms = <75>;
        key-positions = <28 29>;
        bindings = <&sk RSHFT>;
      };
      
  };

    keymap {
      compatible = "zmk,keymap";

      default_layer {
        bindings = <
                      &kp Q &kp W &kp E &kp R &kp T          &kp Y &kp U &kp I &kp O &kp P             
                      &kp A &kp S &kp D &kp F &kp G          &kp H &kp J &kp K &kp L &kp SQT      
                      &kp Z &kp X &kp C &kp V &kp B          &kp N &kp M &kp COMMA &kp DOT &kp SLASH  
                &lt NUM ESC &lt NAV TAB &mt LGUI RET         &kp SPACE &mt RSHIFT TAB &lt FUN BSPC 
        >;
                                
        sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp PG_UP PG_DN>;

      };


   nav_layer { 
            bindings = <
                      &kp N1 &kp N2 &kp N3 &kp N4 &kp N5           &kp N6 &kp N7 &kp N8 &kp N9 &kp N0 
          &kp TAB &kp LEFT &kp UP &kp DOWN &kp RIGHT           &kp EQUAL &kp MINUS &sk LBKT &sk RBKT &kp SEMI
         &kp LSHIFT &sk LGUI &kp PG_UP &kp PG_DN &kp GRAVE           &none &none &none &none &sk RSHIFT 
                                       &mo NUM &kp LGUI &none          &sk RGUI &sk RALT &kp RCTRL 
        >;
            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp PG_UP PG_DN>;
      }; 

      num_layer {
            bindings = <
          &kp N1 &kp N2 &kp N3 &kp N4 &kp N5           &kp N6 &kp N7 &kp N8 &kp N9 &kp N0 
    &sk LSHFT &sk LCTRL &sk LGUI &sk LALT &kp EQUAL           &kp EQUAL &kp N4 &kp N5 &kp N6 &kp PLUS 
                     &kp N6 &kp N7 &kp N8 &kp N9 &kp N0            &kp BSLH &kp N1 &kp N2 &kp N3 &kp GRAVE 
                              &none &mo NAV &kp RET           &kp N0 &kp MINUS &kp DOT 
            >;

    sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp PG_UP PG_DN>;

    };

    sym_layer {
            bindings = <
    &kp LBRC &kp AMPS &kp ASTRK &kp UNDER &kp RBRC          &none &none &none &none &none   
  &kp COLON &kp DLLR &kp PRCNT &kp CARET &kp PLUS          &none &sk RALT &sk RGUI &sk RCTRL &sk RSHFT 
      &kp TILDE &kp EXCL &kp AT &kp HASH &kp PIPE          &none &none &none &none &none 
                      &none &none &none          &none &none &none              
            >;

    sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp PG_UP PG_DN>;
    
    };

    fun_layer{
              bindings = <
                &kp F12 &kp F7 &kp F8 &kp F9 &none          &none &none &none &none &none  
              &kp F11 &kp F4 &kp F5 &kp F6 &kp SLCK          &none &sk RALT &sk RGUI &sk RCTRL &sk RSHFT 
      &kp F10 &kp F1 &kp F2 &kp F3 &kp PAUSE_BREAK          &none &none &none &none &none 
                        &kp K_APP &kp SPACE &kp RET          &none &none &none  
            >;

    sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp PG_UP PG_DN>;
    };


      media_layer {
              bindings = <
                       &none &none &none &none &none                    &none &kp C_BRI_DN &kp C_BRI_UP &out OUT_USB &out OUT_BLE 
       &sk LSHFT &sk LCTRL &sk LGUI &sk LALT &kp TAB                              &kp C_PREV &kp C_VOL_DN &kp C_VOL_UP &kp C_NEXT &none
        &kp C_BRI_DN &kp C_BRI_UP &kp C_VOLUME_DOWN &kp C_VOLUME_UP &kp C_MUTE          &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_CLR  
                          &none &none &none                                        &kp C_STOP &kp C_PP &kp C_MUTE              
              >;

      sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp PG_UP PG_DN>;
      };

}; 
};  


